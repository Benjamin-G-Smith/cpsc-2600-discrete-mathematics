// NAME:
// FILE: Graph.cpp
// DESCRIPTION: Implementation of the Graph class.

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>

using namespace std;

#include "Graph.h"
#include "QueueInt.h"
#include "StackInt.h"

// Constructor
Graph::Graph()
{
}

// Destructor
Graph::~Graph()
{
  for(int i = 0; i < matrixSize; i++){
    delete [] agencyArray[i];
  }
  delete [] agencyArray;
  delete [] visited;
  matrixSize = 0;
}

// Load the graph from a file
void Graph::load(char *filename)
{
  //cout << filename << endl;
  ifstream file;
  //cout << filename << endl;
  file.open(filename);

  if(file.fail()){
    cout << "Unable to open file..." << endl;
    return;
  }
  int value = 0;
  cin.get();
  file >> value;
  cin.get();
  if(value == 0){
    cout << "zero " << endl;
    cin.get();
  }
  if(value != 0)
  {
  cin.get();
  matrixSize = value;
  cout <<"size "<< matrixSize << endl;
  cin.get();

  initalizeMatrix(matrixSize);

  while(file >> value){
    int row = value;
    file >> value;
    int col = value;
    file >> value;
    int data = value;
    agencyArray[row][col] = data;
    agencyArray[col][row] = data;
    cout << row <<" "<< col << " " << data << endl;
  }
  visited = new int[matrixSize];
}
else{
  cout << "There are no verticis in Graph file" << endl;
}




}
void Graph::initalizeCheckArray(int matrixSize)
{
  visited = new int[matrixSize];
  for(int r = 0; r < matrixSize; r++){
    visited[r] = 0;
    }

}
void Graph::initalizeMatrix(int matrixSize)
{
  agencyArray = new int* [matrixSize];
  for(int i = 0; i < matrixSize; i++){
    agencyArray[i] = new int[matrixSize];
  }
  for(int r = 0; r < matrixSize; r++){
    for(int c = 0; c < matrixSize; c++){
      if(agencyArray[r][c] < 1 && r != c){
        agencyArray[r][c] = -1;
      }
      else if (r == c ){
        agencyArray[r][c] = 0;
      }
      cout << agencyArray[r][c] << " ";
    }
    cout << endl;
  }
}
// Display the adjacency matrix
void Graph::display() const
{
  cout <<"      ";
  for(int i = 0; i < matrixSize; i++){
    if(i >= 10){
      cout <<i<<" ";
    }
    else{
      cout <<i<<"  ";
    }

  }
  cout << endl;
  for(int r = 0; r < matrixSize; r++){
    if(r >= 10){
     cout <<"   "<< r;
    }
    else{
    cout <<"    "<< r;
    }
    for(int c = 0; c < matrixSize; c++){
      if(r == c){
        cout << " 0 ";
      }
      else if(agencyArray[r][c] < 1){
        cout << " x ";
      }
      else{
      if(agencyArray[r][c] >= 10){
        cout <<" "<< agencyArray[r][c]<<"";
      }
      else{
        cout <<" "<< agencyArray[r][c]<<" ";
      }
    }

    }
    cout<<"    "<<endl;
  }
  cout << endl;
}

// Displays the depth first search starting at the given vertex
void Graph::displayDFS(int vertex) const
{
  //int index = 0;
  //int source = vertex;
  cout << "DFS at vertex "<< vertex << ":" << " ";
  //initalizeCheckArray(matrixSize);
  StackInt dfsStack;
  for(int i = 0; i < matrixSize; i++){
    visited[i] = 0;
    }
  visited[vertex] = 1;
  dfsStack.push(vertex);
  dfs(vertex, dfsStack);
  cout << endl;

}
void Graph::dfs(int vertex, StackInt dfsStack) const {
  cout << vertex << " ";
  for(int i = 0; i < matrixSize; i++){
    if(agencyArray[vertex][i] != -1 && vertex != i){
      if(visited[i] == 0){
        visited[i] = 1;
        dfsStack.push(i);
        dfs(i, dfsStack);
      }
    }
  }
}


// Perform breadth first search starting at the given vertex
void Graph::displayBFS(int vertex) const
{
  cout << "BFS at vertex "<< vertex << ":" << " ";
  for(int i = 0; i < matrixSize; i++){
    visited[i] = 0;
    }
    QueueInt q;
    q.enqueue(vertex);
    visited[vertex] = 1;
    while(!q.isEmpty()){
      vertex = q.dequeue();
      cout << vertex << " ";
      for(int i = 0; i < matrixSize; i++){
        if(agencyArray[vertex][i] != -1 && visited[i] == 0){
          q.enqueue(i);
          visited[i] = 1;
        }
      }
    }
    cout << endl;
}
// Compute the cost of a minimum spanning tree.
int Graph::computeMSTCost() const
{
  int visited[matrixSize];
  bool done = false;
  bool VerticiesInGraph;
  bool found;
  bool minEdgeFound;
  int mstCost = 0;
  int minEdge;
  int minVertex;
  int index = 0;

  //loop to traverse the graph and create a visited array.
  for(int i = 0; i < matrixSize; i++){
    visited[i] = -1;
  }
  visited[0] = 0;

  while(!done){
    minEdge = 0;
    minVertex = -1;
    minEdgeFound = false;
    //loops to find the node with the smallest weight.
    for(int row = 0; row <= index; row++){
      // this loop finds the minimum edge weight.
      for(int col = 0; col < matrixSize; col++){
        if(visited[row] != col && agencyArray[visited[row]][col] != -1){
          found = false;
          for(int k = 0; k < matrixSize && !found; k++){
            if(visited[k] == col){
              found = true;
            }
          }
          if(!found){
            if(!minEdgeFound){
              minEdge = agencyArray[visited[row]][col];
              minVertex = col;
              minEdgeFound = true;
            }
            else if(agencyArray[visited[row]][col] < minEdge){
              minEdge = agencyArray[visited[row]][col];
              minVertex = col;
            }
          }
        }
      }
    }
    if(minEdgeFound){
      index += 1;
      visited[index] = minVertex;
      cout << minEdge << endl;
      mstCost += minEdge;
    }

    VerticiesInGraph = true;
    for(int i = 0; i < matrixSize && VerticiesInGraph; i++){
      if(visited[i] == -1){
        VerticiesInGraph = false;
      }
    }
    if(VerticiesInGraph){
      done = true;
    }
    else if(!minEdgeFound){
       done = true;
       mstCost = -1;
    }
  }
  /*
  int mstCost = 0;
  int parent[matrixSize];
  int key[matrixSize];
  bool mstSet[matrixSize];

  for(int i = 0; i < matrixSize; i++){
    key[i] = -1;
    mstSet[i] = false;
  }
  key[0] = 0;
  parent[0] = 0;
  for(int count = 0; count < matrixSize-1; count++){
    int u = minKey(key, mstSet);
    mstSet[u] = true;
    for(int v = 0; v < matrixSize; v++){
      if(((agencyArray[u][v] > 0) && mstSet[v] == false) && (agencyArray[u][v] > key[v])){
        //cout << agencyArray[u][v] << endl;
        mstCost += u;
        parent[v] = u;
        key[v] = agencyArray[u][v];
      }
    }
  }
  for(int i = 0; i < matrixSize; i++){
    cout << parent[i] <<" "<< i <<" "<<agencyArray[i][parent[i]] << endl;
  }*/

/*  if(matrixSize == 0){
    return 0;
  }
  for(int i = 0; i < matrixSize; i++){
    visited[i] = 0;
    }

    QueueInt q;
    QueueInt s;
    int mstCost = 0;
    int vertex = 0;
    int shortest = 0;
    int index = 0;
    int tindex = 0;
    bool done = false;

    q.enqueue(vertex);
    s.enqueue(vertex);
    visited[vertex] = 1;

    while(!q.isEmpty()){
      vertex = q.dequeue();
      cout << vertex << endl;
      done = false;
              tindex = 0;
      while(!done && tindex <= matrixSize){

        if(agencyArray[vertex][tindex] > 0 && visited[tindex] == 0){
          shortest = agencyArray[vertex][tindex];
          visited[tindex] = 1;
          index = tindex;
          cout << "index " << index << endl;
          done = true;
        }
        tindex++;
      }

      cout << "shortest " << shortest << endl;
      for(int i = 0; i < matrixSize; i++){
        cout << visited[i];
      }
      cin.get();

      for(int i = 0; i < matrixSize; i++){
        if(agencyArray[vertex][i] != -1 && visited[i] == 0){
          //cout << agencyArray[vertex][i] << endl;
          if(shortest > agencyArray[vertex][i]){
            //cout << "Shortest > agencyArray" << endl;
            q.enqueue(i);
            s.enqueue(i);
            mstCost += agencyArray[vertex][i];
            //cout << " shortest > " << mstCost << endl;
            visited[i] = 1;
          }
          else{
            //cout << "smallest " << index << endl;
            q.enqueue(index);
            s.enqueue(index);
            mstCost += shortest;
            //cout << "shortest is smallest " << mstCost << endl;
          }
        }
      }
    }

    while(!s.isEmpty()){
      int x  = s.dequeue();
      cout << x << " ";
    }
    cout << endl;*/

  return mstCost;
}
